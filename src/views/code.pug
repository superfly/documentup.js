doctype html
html
  head

    //- Document Settings
    meta(charset="utf-8")
    meta(http-equiv="X-UA-Compatible" content="IE=edge")

    //- Referrer
    meta(name="referrer" content="origin")

    //- Mobile
    meta(name="HandheldFriendly" content="True")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")

    //- Favicon
    link(rel="icon" href="/images/favicon.ico" sizes="16x16 32x32 48x48" type="image/x-icon")

    //- Page title
    title DocumentUp &middot; Automatically generated documentation sites for your markdown files

    //- Stylesheets
    link(rel="stylesheet" type="text/css" href="/screen.css" media="all")

    //- Font-loading JS
    script
      include includes/fonts.js

  body.app

    //- Main content
    main(role="main")
      - let commentsList = comments
      dl.annotated-code
        if !commentsList
          dt.annotation
          dt.code
            pre
              code(class=`language-${language}`)
                - let code = source.join("\n")
                - let syntax = Prism.languages[language]
                != (syntax && Prism.highlight(code, syntax)) || code
        else
          while commentsList
            - let current = commentsList.data
            - let nextList = commentsList.next
            - let nextComment = nextList ? nextList.data : null
            dt.annotation
              != markdown.render(current.content).body
            dd.code
              - let code = ''
              if nextList
                - code = source.slice(Math.max(current.codeStart - 1, 0), nextComment.begin - 1).join("\n")
              else
                - code = source.slice(Math.max(current.codeStart - 1, 0)).join("\n")
              pre
                code(class=`language-${language}`)
                  - let syntax = Prism.languages[language]
                  != (syntax && Prism.highlight(code, syntax)) || code
            - commentsList = nextList
